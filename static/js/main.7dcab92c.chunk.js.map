{"version":3,"sources":["Portfolio.js","registerServiceWorker.js","index.js"],"names":["Portfolio","className","href","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAyCeA,G,6KApCX,OACE,yBAAKC,UAAU,aACb,8BACE,uBAAGA,UAAU,OACX,uBAAGA,UAAU,SAASC,KAAK,gCAAgCC,OAAO,SAAlE,QADF,QAEE,uBAAGF,UAAU,SAASC,KAAK,6BAA6BC,OAAO,SAA/D,SAFF,QAGE,uBAAGF,UAAU,SAASC,KAAK,+BAA+BC,OAAO,SAAjE,UAHF,QAIE,uBAAGF,UAAU,SAASC,KAAK,wCAAwCC,OAAO,SAA1E,YAJF,QAKE,uBAAGF,UAAU,SAASC,KAAK,gCAAgCC,OAAO,SAAlE,YAEF,uBAAGF,UAAU,SAAb,uBAGA,6BACE,uBAAGA,UAAU,SAAb,6EAGA,uTAC2R,uBAAGC,KAAK,4FAA4FC,OAAO,SAA3G,oBAD3R,KAGA,uPAGA,sHAGA,0T,GA5BYC,cCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD0GjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7dcab92c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Portfolio.css';\n\nclass Portfolio extends Component {\n  render() {\n    return (\n      <div className=\"Portfolio\">\n        <code>\n          <p className=\"Nav\">\n            <a className=\"Button\" href=\"https://medium.com/@aprilrueb\" target=\"blank\">Blog</a> &nbsp;\n            <a className=\"Button\" href=\"mailto:aprilrueb@gmail.com\" target=\"blank\">Email</a> &nbsp;\n            <a className=\"Button\" href=\"https://github.com/aprilrueb\" target=\"blank\">GitHub</a> &nbsp;\n            <a className=\"Button\" href=\"https://www.linkedin.com/in/aprilrueb\" target=\"blank\">LinkedIn</a> &nbsp;\n            <a className=\"Button\" href=\"https://twitter.com/aprilrueb\" target=\"blank\">Twitter</a>\n          </p>\n          <p className=\"Title\">\n            APRIL RUEB MCKENZIE\n          </p>\n          <div>\n            <p className=\"Intro\">\n              Journalist and professional social media addict turned software engineer.\n            </p>\n            <p>\n              Until August 2017, I worked in social media for various magazines: Parents, Good Housekeeping, Prevention, and more. I left my position as head of social media at Rodale to attend the Grace Hopper Program, a 17-week immersive software engineering course for women. Read more about <a href=\"https://medium.com/@aprilrueb/career-change-from-editor-to-software-engineer-6b67bae4d5bc\" target=\"blank\">my career change</a>.\n            </p>\n            <p>\n              I'm currently a senior data science engineer at Hero Digital. My days involve analytics, tag managers, and lots of JavaScript. I work remotely in NYC, making frequent trips to the Philadelphia and New Jersey offices.\n            </p>\n            <p>\n              When I'm not coding, you can find me running, crafting, or scrolling through Instagram.\n            </p>\n            <p>\n              If you're considering attending a coding bootcamp or making a career change, feel free to reach out. I'm more than happy to talk about my experience and answer any questions you may have. At the top of this page is my email, along with other places to find me on the internet.\n            </p>\n          </div>\n        </code>\n      </div>\n    );\n  }\n}\n\nexport default Portfolio;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Portfolio from './Portfolio';\nimport { unregister } from './registerServiceWorker';\n\nReactDOM.render(<Portfolio />, document.getElementById('root'));\nunregister();\n"],"sourceRoot":""}